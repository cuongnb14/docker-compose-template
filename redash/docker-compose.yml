version: "2"
x-redash-service: &redash-service
  image: redash/redash:8.0.0.b32245
  depends_on:
    - postgres
    - redis
  env_file: ./env
  restart: always
  networks:
    - traefik-net
  logging:
    driver: "json-file"
    options:
      max-size: "10M"
      max-file: "3"

services:
  server:
    <<: *redash-service
    command: server
    # ports:
    #   - "5000:5000"
    environment:
      REDASH_WEB_WORKERS: 4

  scheduler:
    <<: *redash-service
    command: scheduler
    environment:
      QUEUES: "celery"
      WORKERS_COUNT: 1

  scheduled_worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "scheduled_queries,schemas"
      WORKERS_COUNT: 1

  adhoc_worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "queries"
      WORKERS_COUNT: 2

  redis:
    image: redis:5.0-alpine
    restart: always
    networks:
      - traefik-net
    logging:
      driver: "json-file"
      options:
        max-size: "10M"
        max-file: "3"

  postgres:
    image: postgres:9.6-alpine
    env_file: ./env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - traefik-net
    logging:
      driver: "json-file"
      options:
        max-size: "10M"
        max-file: "3"

  nginx:
    image: redash/nginx:latest
    # ports:
    #   - "80:80"
    depends_on:
      - server
    links:
      - server:redash
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.api.rule=Host(`redash.example.com`)"
      - "traefik.http.routers.api.entrypoints=https"
      - "traefik.http.routers.api.tls.certresolver=ssl"
      - "traefik.http.services.api.loadbalancer.server.port=80"
    networks:
      - traefik-net
      
    logging:
      driver: "json-file"
      options:
        max-size: "10M"
        max-file: "3"

volumes:
  postgres_data:

networks:
  traefik-net:
    external: true
